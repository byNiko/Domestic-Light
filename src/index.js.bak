import "leaflet/dist/leaflet.css";
import "./styles.css";

import * as L from "leaflet";
import "leaflet.markercluster";

import "leaflet-providers";
import { tmg } from "./transverseMercatorUTMGrid";
import { wavelengthToHSL, colorList } from "./convertColors";

const map = L.map("map").setView([0, -0.0], 3);
const c = wavelengthToHSL(415, 987);

// functions

// setup External Locations in geo JSON list
const geoToken = "01PnfYABfF7j";
const geoJSONUrl = `https://api.json-generator.com/templates/${geoToken}/data`;
const myHeaders = new Headers();
myHeaders.append(
  "Authorization",
  "Bearer cqyt1wl6pl87vdcb0yzwls5g34176a33gp6h82nh"
);
const requestOptions = {
  method: "GET",
  headers: myHeaders,
  redirect: "follow"
};

function geojsonMarkerOptions(feature) {
  return {
    radius: 8,
    // fillColor: `hsl(${feature.properties.marker_hsl[0]},${feature.properties.marker_hsl[1]},${feature.properties.marker_hsl[2]})`,
    fillColor: feature.properties.marker_color,
    color: "#000",
    weight: 1,
    opacity: 1,
    fillOpacity: 0.8
  };
}

// popup content
function popupInfo(feature) {
  let x = "";
  if (Object.keys(feature.properties.colors).length > 0)
    for (const key in feature.properties.colors) {
      x += `<div>${colorList[key]} : ${feature.properties.colors[key]}</div>`;
    }
  return x;
}

async function fetchGeoJson(url, requestOptions) {
  const resp = await fetch(url, requestOptions);
  const result = await resp.json();
  return result;
}

// load map providers
const osm = L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
  maxZoom: 19,
  noWrap: true,
  bounds: [
    [-90, -180],
    [90, 180]
  ],
  attribution: "&copy; Open Street Map"
}).addTo(map);

const USGS_USImagery = L.tileLayer(
  "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}",
  {
    maxZoom: 8,
    attribution:
      'Tiles courtesy of the <a href="https://usgs.gov/">U.S. Geological Survey</a>'
  }
);

// L.tileLayer.provider("USGS.USImagery").addTo(map);

// leaflet layer control
const baseMaps = {
  "Open Street Map": osm,
  "USGS Imagery": USGS_USImagery
};

// transverse mercator Grid
let mercatorGrid = L.geoJSON(tmg).addTo(map);

let markers = L.markerClusterGroup({
  spiderfyOnMaxZoom: false,
  showCoverageOnHover: false,
  zoomToBoundsOnClick: true,
  chunkedLoading: true,
  chunkProgress: function (x, y, z) {
    console.log(x, y, z);
  },
  maxClusterRadius: function (zoom) {
    return 10;
  },
  iconCreateFunction: function (cluster) {
    var childCount = cluster.getChildCount();

    var c = " marker-cluster-";
    if (childCount < 10) {
      c += "small";
    } else if (childCount < 100) {
      c += "medium";
    } else {
      c += "large";
    }

    return new L.DivIcon({
      html: `<span>${childCount}</span>`,
      className: "marker-cluster" + c
    });
  }
});
const geoJSON = fetchGeoJson(geoJSONUrl, requestOptions);

let locations = geoJSON.then((resp) => {
  L.geoJSON(resp, {
    // onEachFeature: forEachFeature,
    pointToLayer: pointToLayer
  }).addTo(map);
});
// map.addLayer(markers);
function pointToLayer(feature, latlng) {
  // return L.circleMarker(latlng, geojsonMarkerOptions(feature));
  return markers.addLayer(
    L.circleMarker(latlng, geojsonMarkerOptions(feature))
  );
}

function forEachFeature(feature, layer) {
  let popupContent = "";
  if (feature.properties) {
    popupContent += `
    <div class="popup-container">
    <h1>Hello ${feature.properties.hostname}</h1>
    <h2
    <div class="properties-items">
    ${popupInfo(feature)}
    </div>
    </div>
    `;
    layer.bindPopup(function (feature) {
      popupContent;
    });
  }
}
// L.control.layers(baseMaps).addTo(map);
